/* Path: src/app/api/register/route.ts
   ----------------------------------------------------------------------------
   üìÑ ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠:
   API Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (Register)"
   - ‡πÉ‡∏ä‡πâ HTTP POST ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö email + password ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ Zod (validation)
   - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ bcrypt
   - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ Prisma
   - ‡πÉ‡∏ä‡πâ logger ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° log ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö structured log
   ---------------------------------------------------------------------------- */

import { NextResponse } from "next/server";        // ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á response ‡∏ù‡∏±‡πà‡∏á server (API)
import { PrismaClient } from "@prisma/client";     // Prisma ORM client
import bcrypt from "bcryptjs";                     // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ password ‡πÅ‡∏ö‡∏ö hash
import { z } from "zod";                           // ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (validation)
import logger from "@/lib/logger";                 // structured logger ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ log ‡πÅ‡∏ö‡∏ö JSON

const prisma = new PrismaClient();                // ‡∏™‡∏£‡πâ‡∏≤‡∏á Prisma client ‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö DB)

/* ----------------------------------------------------------------------------
   üõ°Ô∏è Zod Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏°‡∏≤
   - email: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
   - password: 
     ‚ñ∏ ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
     ‚ñ∏ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
     ‚ñ∏ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
---------------------------------------------------------------------------- */
const registerSchema = z.object({
  email: z.string().email("Invalid email format"),
  password: z
    .string()
    .min(8, "Password must be at least 8 characters")
    .regex(/[A-Za-z]/, "Password must include at least one letter")
    .regex(/\d/, "Password must include at least one number"),
});

/* ----------------------------------------------------------------------------
   üì• POST /api/register
   - ‡∏£‡∏±‡∏ö request ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
   - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ password ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á DB
---------------------------------------------------------------------------- */
export async function POST(req: Request) {
  const start = Date.now(); // ‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏î performance)

  logger.info({ method: "POST", path: "/api/register" }, "incoming request");

  /* ---------------------------------------------
     üì¶ STEP 1: ‡πÅ‡∏õ‡∏•‡∏á JSON ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
     - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏±‡∏á ‚Üí ‡∏ï‡∏≠‡∏ö 400
  --------------------------------------------- */
  let body: unknown;
  try {
    body = await req.json(); // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° parse body ‡∏à‡∏≤‡∏Å request ‡πÄ‡∏õ‡πá‡∏ô JSON
  } catch {
    logger.warn("invalid JSON"); // log warning ‡∏ñ‡πâ‡∏≤ JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    return NextResponse.json({ error: "Invalid JSON payload" }, { status: 400 });
  }

  /* ---------------------------------------------
     ‚úÖ STEP 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ Zod
     - ‡πÉ‡∏ä‡πâ .safeParse ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà throw error
     - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡πÅ‡∏£‡∏Å‡∏à‡∏≤‡∏Å issues[]
  --------------------------------------------- */
  const parsed = registerSchema.safeParse(body);
  if (!parsed.success) {
    const msg = parsed.error.issues[0].message;
    logger.info({ msg }, "validation error");
    return NextResponse.json({ error: msg }, { status: 400 });
  }

  /* ---------------------------------------------
     ‚öôÔ∏è STEP 3: Logic ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
     - ‡πÅ‡∏õ‡∏•‡∏á email ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô lowercase
     - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ email ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
     - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ ‚Üí hash password ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà
  --------------------------------------------- */
  const { email, password } = parsed.data;
  const emailLC = email.toLowerCase(); // normalize email

  // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ email ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  const existing = await prisma.user.findUnique({ where: { email: emailLC } });
  if (existing) {
    logger.info({ email }, "duplicate email"); // log ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    return NextResponse.json({ error: "Email already used" }, { status: 409 });
  }

  // üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ password ‡∏î‡πâ‡∏ß‡∏¢ bcrypt (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏π‡∏á)
  const hash = await bcrypt.hash(password, 12);

  // üíæ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  await prisma.user.create({
    data: { email: emailLC, passwordHash: hash },
  });

  // ‚úÖ log ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
  logger.info(
    { email, ms: Date.now() - start },
    "register success"
  );

  // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏ß‡πà‡∏≤ success
  return NextResponse.json({ ok: true });
}
