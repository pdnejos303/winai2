/* -------------------------------------------------------------------------- *
   üìÅ  src/app/api/tasks/[id]/route.ts
   --------------------------------------------------------------------------
   REST handlers‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Task ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß  (GET ¬∑ PATCH ¬∑ DELETE)
   ‚Ä¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Next.js 15 ‚Äì ‡∏ï‡πâ‡∏≠‡∏á await context.params ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ id
   ‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session ‚Üí uid  (Int) ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
   ‚Ä¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç status ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà completed | incompleted
   ------------------------------------------------------------------------ */

import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/authOptions";
import prisma from "@/lib/prisma";

/* -------------------------------------------------------------------------- */
/*  helper: ‡∏£‡∏±‡∏ö userId (Int) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô null                           */
/* -------------------------------------------------------------------------- */
async function currentUserId() {
  const s   = await getServerSession(authOptions);
  const uid = Number(s?.user?.id);
  return !s || Number.isNaN(uid) ? null : uid;
}

/* -------------------------------------------------------------------------- */
/*  GET /api/tasks/[id] ‚Äì ‡∏≠‡πà‡∏≤‡∏ô Task ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß                                     */
/* -------------------------------------------------------------------------- */
export async function GET(
  _req: NextRequest,
  context: { params: { id: string } },      // ‚Üê ‡πÑ‡∏°‡πà destructure
) {
  const uid = await currentUserId();
  if (!uid) return NextResponse.json({ message: "Unauthorized" }, { status: 401 });

  const { id: idStr } = await context.params; // ‚Üê ‡∏ï‡πâ‡∏≠‡∏á await
  const id = Number(idStr);

  const task = await prisma.task.findFirst({ where: { id, userId: uid } });

  return task
    ? NextResponse.json(task)
    : NextResponse.json({ message: "Not found" }, { status: 404 });
}

/* -------------------------------------------------------------------------- */
/*  PATCH /api/tasks/[id] ‚Äì ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï status ‡∏´‡∏£‡∏∑‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏≠‡∏∑‡πà‡∏ô ‡πÜ                    */
/* -------------------------------------------------------------------------- */
export async function PATCH(
  req: NextRequest,
  context: { params: { id: string } },
) {
  const uid = await currentUserId();
  if (!uid) return NextResponse.json({ message: "Unauthorized" }, { status: 401 });

  const { id: idStr } = await context.params; // ‚Üê ‡∏ï‡πâ‡∏≠‡∏á await
  const id = Number(idStr);

  const body = (await req.json()) as Partial<{
    title: string;
    description: string;
    dueDate: string;
    urgency: string;
    category: string;
    status: "completed" | "incompleted";
  }>;

  if (
    body.status &&
    body.status !== "completed" &&
    body.status !== "incompleted"
  ) {
    return NextResponse.json({ message: "Bad status" }, { status: 400 });
  }

  const task = await prisma.task.update({
    where: { id, userId: uid },
    data:  body,
  });

  return NextResponse.json(task);
}

/* -------------------------------------------------------------------------- */
/*  DELETE /api/tasks/[id] ‚Äì ‡∏•‡∏ö Task                                          */
/* -------------------------------------------------------------------------- */
export async function DELETE(
  _req: NextRequest,
  context: { params: { id: string } },
) {
  const uid = await currentUserId();
  if (!uid) return NextResponse.json({ message: "Unauthorized" }, { status: 401 });

  const { id: idStr } = await context.params; // ‚Üê ‡∏ï‡πâ‡∏≠‡∏á await
  const id = Number(idStr);

  await prisma.task.delete({ where: { id, userId: uid } });

  return NextResponse.json({ ok: true });
}
