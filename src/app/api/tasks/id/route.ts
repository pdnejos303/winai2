/* Path: src/app/api/tasks/[id]/route.ts
   ----------------------------------------------------------------------------
   üìÑ ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠:
   API Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "Task ‡∏£‡∏≤‡∏¢‡∏ï‡∏±‡∏ß" (‡πÉ‡∏ä‡πâ dynamic route `[id]`)
   - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö HTTP PATCH: ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï task ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≤‡∏° id
   - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö HTTP DELETE: ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö task ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≤‡∏° id
   - ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ú‡πà‡∏≤‡∏ô NextAuth (getServerSession)
   - ‡πÉ‡∏ä‡πâ Prisma ORM ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   ---------------------------------------------------------------------------- */

import { NextRequest, NextResponse } from "next/server"; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ request/response ‡πÅ‡∏ö‡∏ö API
import { getServerSession } from "next-auth"; // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Å session ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö server-side
import { authOptions } from "@/app/api/auth/[...nextauth]/route"; // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å config auth (Google, Credentials ‡∏Ø‡∏•‡∏Ø)
import prisma from "@/lib/prisma"; // Prisma client ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

/* --------------------------------------------------------------------------
   üìù PATCH: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Task ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏ï‡∏≤‡∏° id ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å URL)
   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session ‡∏Å‡πà‡∏≠‡∏ô (‡∏ï‡πâ‡∏≠‡∏á login)
   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ id ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï field ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ (‡πÅ‡∏ö‡∏ö dynamic)
   -------------------------------------------------------------------------- */
export async function PATCH(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const session = await getServerSession(authOptions); // ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤ user login ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!session || !session.user?.email) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 }); // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login ‚Üí 401
  }

  const id = Number(params.id); // ‡∏î‡∏∂‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå id ‡∏à‡∏≤‡∏Å URL ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
  if (isNaN(id)) {
    return NextResponse.json({ error: "Invalid ID" }, { status: 400 }); // id ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏•‡∏Ç ‚Üí 400
  }

  const body = await req.json(); // ‡∏≠‡πà‡∏≤‡∏ô body ‡∏Ç‡∏≠‡∏á request (JSON)
  const { title, description, dueDate, urgency, category, status } = body;

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô body (‡πÉ‡∏ä‡πâ spread + short-circuit)
  const updatedTask = await prisma.task.update({
    where: { id }, // ‡∏´‡∏≤ task ‡∏à‡∏≤‡∏Å id
    data: {
      ...(title && { title }),
      ...(description && { description }),
      ...(dueDate && { dueDate: new Date(dueDate) }), // ‡πÅ‡∏õ‡∏•‡∏á string ‚Üí Date
      ...(urgency && { urgency }),
      ...(category && { category }),
      ...(status && { status }),
    },
  });

  return NextResponse.json(updatedTask); // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ task ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
}

/* --------------------------------------------------------------------------
   üóëÔ∏è DELETE: ‡∏•‡∏ö Task ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏ï‡∏≤‡∏° id)
   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á id ‡πÄ‡∏ä‡πà‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö PATCH
   - ‡∏•‡∏ö task ‡πÉ‡∏ô database
   -------------------------------------------------------------------------- */
export async function DELETE(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const session = await getServerSession(authOptions); // ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤ user login ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!session || !session.user?.email) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 }); // ‡πÑ‡∏°‡πà login ‚Üí ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
  }

  const id = Number(params.id); // ‡∏î‡∏∂‡∏á id ‡∏à‡∏≤‡∏Å URL ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
  if (isNaN(id)) {
    return NextResponse.json({ error: "Invalid ID" }, { status: 400 }); // id ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏•‡∏Ç ‚Üí ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
  }

  await prisma.task.delete({ where: { id } }); // ‡∏•‡∏ö task ‡∏à‡∏≤‡∏Å DB ‡∏ï‡∏≤‡∏° id

  return NextResponse.json({ ok: true }); // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ß‡πà‡∏≤ "‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
}
