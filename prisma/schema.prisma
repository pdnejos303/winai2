generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ─────────────────────────────  USER & AUTH  ───────────────────────────── */

model User {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  name          String?
  image         String?
  emailVerified DateTime?
  passwordHash  String?

  // relations
  Accounts   Account[]
  Sessions   Session[]
  Tasks      Task[]
  Categories Category[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  access_token      String? @db.Text
  expires_at        Int?
  scope             String?
  id_token          String? @db.Text
  token_type        String?
  refresh_token     String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/* ─────────────────────────────  TASK & CATEGORY  ───────────────────────── */

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  dueDate     DateTime
  urgency     Int       @default(0)           // 0-none • 1-low • 2-medium • 3-high
  status      String    @default("incompleted")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  /* relations */
  userId     Int
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])
}

model Category {
  id     Int    @id @default(autoincrement())
  name   String                         // ชื่อหมวด
  icon   String                         // ex: "lucide:book", "heroicons:heart"
  color  String                         // HEX / HSL (#FFAA00)

  /* relations */
  userId Int
  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks  Task[]

  @@unique([userId, name])              // ไม่ให้ชื่อหมวดซ้ำภายใต้ user เดียวกัน
}
